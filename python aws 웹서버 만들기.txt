python aws 웹서버 만들기

aws 서버 접속후:
git clone https://github.com/soonjongHeo/py_movieTranslation.git (해당 깃주소), 깃 다시 업데이트 받기(git pull)
받으면 해당 폴더이동(프로젝트폴더)
sudo apt update
sudo apt install python3-pip -> Y
pip install -r requirements.txt
python3 manage.py migrate
python3 manage.py runserver 0.0.0.0:8000 (aws 인바운드에서 8000포트 추가한다 0.0.0.0으로 전체가능하게 )
웹사이트에서 http://3.39.239.80:8000/main/(퍼블릭 IPv4 주소)로 접속

sudo pip3 install uwsgi
uwsgi --http :8000 --module Jinstagram.wsgi (wsgi모듈있는 폴더)

sudo apt-get install nginx -> Y
systemctl status nginx (서버가 띄어있는지 확인 active(running) < 실행중)
/home/ubuntu/ 에서 uwsgi.ini파일 생성후 내용 채우기
( 

[uwsgi]
socket = /home/ubuntu/uwsgi.sock
master = true
processes = 1
threads = 2
chdir = /home/ubuntu/py_movieTranslation
wsgi-file = Jinstagram/wsgi.py
chmod-socket = 666
vacuum = true

logger = file:/tmp/uwsgi.log
pythonpath = /home/ubuntu/.local/lib/python3.10/site-packages

)

uwsgi -i uwsgi.ini 실행하면
다른 새창으로 서버 접속하여 /home/ubuntu/uwsgi.sock파일이 만들어진것을 확인한다.
그리고 tmp폴더로 가서 uwsgi.log파일을 확인후 여기서 트래킹을 한다( tail -f uwsgi.log )
etc/nginx/sites-available/ 가서-> sudo vi default 내용 다 지우고,
(

upstream django {
    server unix:///home/ubuntu/uwsgi.sock;
}

server {
    listen      80;
    server_name localhost;
    charset     utf-8;

    client_max_body_size 80M;

    location / {
        uwsgi_pass django;
        include    /etc/nginx/uwsgi_params;
    }
}

)

중요한건 *ubuntu 폴더에 권한이 안되있으면 권한부족으로 에러남 방법은: sudo chmod 705 ubuntu (home에서 실행)


uwsgi 실행중 확인: ps aux | grep uwsgi
uwsgi 실행중지: sudo killall -9 uwsgi
-d uwsgi.log 옵션을 주면 로그파일이 생성과함께 백그라운드 실행 방법: uwsgi -d uwsgi.log -i uwsgi.ini




ubuntu docker설치
Ubuntu에서 Docker를 설치하는 방법은 다음과 같습니다.

패키지 색인 업데이트
sudo apt-get update
Docker의 GPG 키 추가
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
Docker의 공식 저장소 추가
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
패키지 색인 업데이트
sudo apt-get update
Docker CE 설치
sudo apt-get install docker-ce
Docker가 제대로 설치되었는지 확인
sudo docker run hello-world

위 방법으로 Ubuntu에 Docker를 설치할 수 있습니다.

docker로 mySql 설치
먼저 그룹에 속해있는지 확인한다.: sudo groups
속해있지않으면 추가한다: sudo usermod -aG docker $USER
Docker 그룹에 사용자를 추가했으면 로그아웃 후 다시 로그인합니다. 이렇게 하면 Docker 그룹 권한이 적용됩니다: sudo docker run hello-world
mysql 설치: sudo docker run --name mysql-db -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password -e MYSQL_PASSWORD=password mysql

(docker: Error response from daemon: Conflict. The container name "mysql-db" is already in use by container 에러 발생시:
docker 구동중에 위와 같이 에러가 발생 한다면
mysql-db 을 중단 하고 삭제 재시작 하면 된다.
docker ps -a
구동 중인거 확인 하고
docker stop mysql-db
docker rm mysql-db
다시 빌드)

MySQL 컨테이너 상태 확인: docker ps
구동중인거 확인: docker ps -a
MySQL 컨테이너에 접속하려면 다음 명령어: docker exec -it mysql-db mysql -uroot -p

mysql툴(DataGrip) 설치한다.
DataGrip 같은경우 로그인하고 > 프로젝트생성 > 스키마 생성할 때 스키마 이름이 settings.py파일에 'NAME'과 동일해야함.
그리고 aws에서 인바운드 3306포트도 만들어준다.
커넥션 테스팅 완료후, 
서버가서 sudo apt-get install python3-dev default-libmysqlclient-dev build-essential 설치하고,
pip3 install mysqlclient 설치한다.
그리고 python3 manage.py makemigrations, python3 manage.py migrate 두개 실행한다.
ps aux | grep uwsgi 떠있는지 확인후 있으면 종료하고 다시 실행한다.
uwsgi -d uwsgi.log -i uwsgi.ini

--------------------------------------------------------------------------------------------------------------
aws RDS 설정 (*유로이기에 개인은 비권장)
Aurora(mysql)
로그인 ID: admin
pw: password

설정완료하고 해당디비 인바운드 편집가서 0.0...(모든호환)으로 하고, 설명에 mysql로 수정함.
그리고, 
mysql툴(DataGrip) 설정
새로 mysql로 선택하고, 이름 넣고 HOST에는: 해당 엔드포인트 넣는다: database-1-instance-1.chchecw6hs2p.ap-northeast-2.rds.amazonaws.com
그리고 Driver: Amazon Aurora Mysql로 선택
User: 마스터 사용자 이름(admin)
pw: 마스터 암호(password)
database: DB 이름(django_devops)
Test Connection
완료되면,
Jinstagram폴더에 setting.py에서 
(
    DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': 'database-1-instance-1.chchecw6hs2p.ap-northeast-2.rds.amazonaws.com',
        'NAME': 'django_devops',
        'USER': 'admin',
        'PASSWORD': 'password',
        'PORT': '3306',
        'OPTIONS': {'charset': 'utf8mb4'},
    }
}
)

aws rds(mysql)로 설정 변경해준다.
다시 git pull 받고,
python3 manage.py makemigrations, python3 manage.py migrate 두개 실행한다.(해당 디비에 테이블 생성)
mysql툴(DataGrip)에 테이블이 생성된거를 확인할 수있다.
그럼 uwsgi -d uwsgi.log -i uwsgi.ini 서버실행

잘되면 다음으로 중요 정보를 숨겨서 설정해보겠다.
먼저 uwsgi.ini파일에 들어가 아래 내용을 추가하고 저장.
(
env=MYSQL_HOST=database-1-instance-1.chchecw6hs2p.ap-northeast-2.rds.amazonaws.com
env=MYSQL_USER=admin
env=MYSQL_PASSWORD=password
env=MYSQL_DB_NAME=django_devops
)

다음으로 Jinstagram폴더에 setting.py에서 
(
   DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': os.environ.get('MYSQL_HOST', '3.39.239.80'),
        'NAME': os.environ.get('MYSQL_DB_NAME', 'django_devops'),
        'USER': os.environ.get('MYSQL_USER', 'root'),
        'PASSWORD': os.environ.get('MYSQL_PASSWORD', 'password'),
        'PORT': '3306',
        'OPTIONS': {'charset': 'utf8mb4'},
    }
  }
)

변경한다.
